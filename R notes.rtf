{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red0\green0\blue0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 11/9  - data from internet \
\
web api - HTTP ( hypertext transfer protocol)\
	URL - \
		protocol, domain, \

\b \ul request
\b0 \ulnone \
	HTTP\
		verb urlpath http_version\
		GET /resources/webinars/ HTTP/1.1\
	HTTP verbs\
		GET - retrieve\
		POST - create\
		PUT -	update resoucres\
		DELETE\
R package to request HTTP data - httr\
	HTTP verb(complete_url) ie r <- GET(\'93http://httpbin.org/get\'94)\
		saves response into object\
		add message to request\
			add_headers(key = value)\
			body = \
				object to be sent\
			encode = \'93form/multipart/raw/json\'94\
				converts object to http type data\
				json - javascript object notation (becoming standard API data format)\
					work with json in r - jsonlite (httr does most of this)\
			verbose()\
				prints out http request\

\b \ul RESPONSE
\b0 \ulnone \
http_version status_code english_exp_of_code\
	(ie 404 is couldnot be found)\
r object is like a model object, use helper function to access response\
	r$status_code\
	http_status(r)\
	to defensively check response\
		r2 <- r$status_code\
		warn_for_status(r2)\
		stop_for_status(r2)\
	content(r, \'91parse\'92) or $content\
		data/raw bytes\
		extract/parse data\
			\'93raw\'94\
			\'93text\'94\
			\'93parse\'94 <- looks at header and if content recognized will convert to proper object\

\b \ul Example
\b0 \ulnone \
www.omdpapi.com\
 \
library(httr)\
\
url <- \'93{\field{\*\fldinst{HYPERLINK "http://www.omdbapi.com/?t=frozen&y=&plot=short&r=json"}}{\fldrslt 
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 http://www.omdbapi.com/?t=frozen&y=&plot=short&r=json}}
\f1 \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'94\
\
frozen <- GET(url)\
frozen\
\
details <- content(frozen, \'91parse\'92)\
details$Year\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 To get data from site, site must have API, and no set rule for APIs so need to read site specific API\
\
To convert obtained data (if json) use jsonlite, other wise data will be either text or xml\
\
Some APIs require specific code/authentication\
\
_________________________\
_________________________\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 predictive modeling\
	types - logistic regression, k-nearest neighbors, classification trees\
machine learning models\
	svm, c50, rf\
	superlearner - apply multiple models to di best for data\
	caret\
\
imbalanced data (http://www.svds.com/learning-imbalanced-classes/)\
	difficult to see clean difference in real unclean imbalance data where groups blend\
		when one group outnumbers another group\
	oversample minority\
	undersample majority\
	synthesize more minority (SMOTE)\
		(can only create new samples within group)\
	adjust weight/importnace\
		increases importance of false negative\
	new algorithm\
		isolation forest/ nearest neighbor ensembles - discard minority\
\
pull from upstream (main repo)\
	git fetch upstrem\
	git checkout master\
	git merge upstream/master \
		-m \'91MESSAGE\'92\
\
\
style guide (http://r-pkgs.had.co.nz/style.html)\
	always file.R\
	files run in sequence, prefix with numbers ( 0_file.R 1_file.R)\
		attention to capitalization\
	object names (concise and meaningful)\
		lowercase with _ to separate words\
			variable <- noun\
			function <- verb\
		aviod names of existing func/var\
	spacing\
		always space before and after operators  (=, +, -, <-, etc.), but only after commas\
			none before or after :\
		parathesis\
			space surrounding unless a function\
		align equal/assignment with extra spaces\
	curly brace\
		open curly never on its own and always followed by a new line\
		closed curly always on its own line\
			unless followed by else\
	length\
		limit to 80 ch\
	indentation\
		two space indent, never use tabs\
		except where continuing previous line, indent to same place\
	assignment\
		use <- not =\
	function\
		should be verbs\
		only use return() for early return\
		strive to keep in one screen (max 20-30 lines)\
	comments\
		# Comment \'97\'97\'97\'97\'97\'97\'97\
		Explain WHY not WHAT\
\
\
lintr\
	install/library lintr\
	then run \
		lint(\'91FILE\'92)\
\
Subsetting\
	== searches column for vector in order and recycles\
	%in% searches column for any in vector\
		to subset by column name\
			DF[,colnames(DF) %in% c(\'93COLNAME\'94,\'94COLNAME\'94]\
		to subset by columns with multiple inputs\
			DF[,sapply(DF, function(col) length(unique(col)))>1]		\
\
gsub\
	grep and replace\
\
for tax dataframe, instead of continuing loop all the way to the top level, could include 
\b \ul while
\b0 \ulnone  \
	with 
\b \ul while
\b0 \ulnone  we can have it loop only until no more \'91unclassified\'92 are present\
\
q - to exit less\
\
Loading packages\
	require tries to attach a package and is a logic - T/F\
\
if(!require(PACKAGE)) install.packages(\'93PACKAGE\'94)\
library(PACKAGE)\
\
or if only using one or two functions from package\
PACKAGE :: FUNCTION\'92\
\
RMD\
echo=F - hide R code\
messages=F\
warnings=F\
\
Linear regression\
\
squared error\
	y=slope*x+y-intercept\
	Error equals Yn - (slope*Xn+yintercept)\
	squared error = (Y - (slope*X+yintercept))^2 + \'85 + (Yn - (slope*Xn+yintercept))^2\
mean of squared residuals}